// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cart: (where?: CartWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  orders: (where?: OrdersWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cart: (where: CartWhereUniqueInput) => CartNullablePromise;
  carts: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cart>;
  cartsConnection: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  orders: (where: OrdersWhereUniqueInput) => OrdersNullablePromise;
  orderses: (args?: {
    where?: OrdersWhereInput;
    orderBy?: OrdersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Orders>;
  ordersesConnection: (args?: {
    where?: OrdersWhereInput;
    orderBy?: OrdersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrdersConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCart: (data: CartCreateInput) => CartPromise;
  updateCart: (args: {
    data: CartUpdateInput;
    where: CartWhereUniqueInput;
  }) => CartPromise;
  updateManyCarts: (args: {
    data: CartUpdateManyMutationInput;
    where?: CartWhereInput;
  }) => BatchPayloadPromise;
  upsertCart: (args: {
    where: CartWhereUniqueInput;
    create: CartCreateInput;
    update: CartUpdateInput;
  }) => CartPromise;
  deleteCart: (where: CartWhereUniqueInput) => CartPromise;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createOrders: (data: OrdersCreateInput) => OrdersPromise;
  updateOrders: (args: {
    data: OrdersUpdateInput;
    where: OrdersWhereUniqueInput;
  }) => OrdersPromise;
  updateManyOrderses: (args: {
    data: OrdersUpdateManyMutationInput;
    where?: OrdersWhereInput;
  }) => BatchPayloadPromise;
  upsertOrders: (args: {
    where: OrdersWhereUniqueInput;
    create: OrdersCreateInput;
    update: OrdersUpdateInput;
  }) => OrdersPromise;
  deleteOrders: (where: OrdersWhereUniqueInput) => OrdersPromise;
  deleteManyOrderses: (where?: OrdersWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  orders: (
    where?: OrdersSubscriptionWhereInput
  ) => OrdersSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "img_ASC"
  | "img_DESC"
  | "pname_ASC"
  | "pname_DESC"
  | "pdetails_ASC"
  | "pdetails_DESC"
  | "price_ASC"
  | "price_DESC"
  | "pcs_ASC"
  | "pcs_DESC"
  | "favourite_ASC"
  | "favourite_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type OrdersOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateOrdered_ASC"
  | "dateOrdered_DESC"
  | "paymentMethod_ASC"
  | "paymentMethod_DESC"
  | "delvyDate_ASC"
  | "delvyDate_DESC"
  | "productStatus_ASC"
  | "productStatus_DESC";

export type CartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "address_ASC"
  | "address_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  pname?: Maybe<String>;
  pname_not?: Maybe<String>;
  pname_in?: Maybe<String[] | String>;
  pname_not_in?: Maybe<String[] | String>;
  pname_lt?: Maybe<String>;
  pname_lte?: Maybe<String>;
  pname_gt?: Maybe<String>;
  pname_gte?: Maybe<String>;
  pname_contains?: Maybe<String>;
  pname_not_contains?: Maybe<String>;
  pname_starts_with?: Maybe<String>;
  pname_not_starts_with?: Maybe<String>;
  pname_ends_with?: Maybe<String>;
  pname_not_ends_with?: Maybe<String>;
  pdetails?: Maybe<String>;
  pdetails_not?: Maybe<String>;
  pdetails_in?: Maybe<String[] | String>;
  pdetails_not_in?: Maybe<String[] | String>;
  pdetails_lt?: Maybe<String>;
  pdetails_lte?: Maybe<String>;
  pdetails_gt?: Maybe<String>;
  pdetails_gte?: Maybe<String>;
  pdetails_contains?: Maybe<String>;
  pdetails_not_contains?: Maybe<String>;
  pdetails_starts_with?: Maybe<String>;
  pdetails_not_starts_with?: Maybe<String>;
  pdetails_ends_with?: Maybe<String>;
  pdetails_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  pcs?: Maybe<Int>;
  pcs_not?: Maybe<Int>;
  pcs_in?: Maybe<Int[] | Int>;
  pcs_not_in?: Maybe<Int[] | Int>;
  pcs_lt?: Maybe<Int>;
  pcs_lte?: Maybe<Int>;
  pcs_gt?: Maybe<Int>;
  pcs_gte?: Maybe<Int>;
  favourite?: Maybe<Boolean>;
  favourite_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export interface OrdersWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  product?: Maybe<CartWhereInput>;
  dateOrdered?: Maybe<DateTimeInput>;
  dateOrdered_not?: Maybe<DateTimeInput>;
  dateOrdered_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateOrdered_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateOrdered_lt?: Maybe<DateTimeInput>;
  dateOrdered_lte?: Maybe<DateTimeInput>;
  dateOrdered_gt?: Maybe<DateTimeInput>;
  dateOrdered_gte?: Maybe<DateTimeInput>;
  paymentMethod?: Maybe<String>;
  paymentMethod_not?: Maybe<String>;
  paymentMethod_in?: Maybe<String[] | String>;
  paymentMethod_not_in?: Maybe<String[] | String>;
  paymentMethod_lt?: Maybe<String>;
  paymentMethod_lte?: Maybe<String>;
  paymentMethod_gt?: Maybe<String>;
  paymentMethod_gte?: Maybe<String>;
  paymentMethod_contains?: Maybe<String>;
  paymentMethod_not_contains?: Maybe<String>;
  paymentMethod_starts_with?: Maybe<String>;
  paymentMethod_not_starts_with?: Maybe<String>;
  paymentMethod_ends_with?: Maybe<String>;
  paymentMethod_not_ends_with?: Maybe<String>;
  delvyDate?: Maybe<String>;
  delvyDate_not?: Maybe<String>;
  delvyDate_in?: Maybe<String[] | String>;
  delvyDate_not_in?: Maybe<String[] | String>;
  delvyDate_lt?: Maybe<String>;
  delvyDate_lte?: Maybe<String>;
  delvyDate_gt?: Maybe<String>;
  delvyDate_gte?: Maybe<String>;
  delvyDate_contains?: Maybe<String>;
  delvyDate_not_contains?: Maybe<String>;
  delvyDate_starts_with?: Maybe<String>;
  delvyDate_not_starts_with?: Maybe<String>;
  delvyDate_ends_with?: Maybe<String>;
  delvyDate_not_ends_with?: Maybe<String>;
  productStatus?: Maybe<String>;
  productStatus_not?: Maybe<String>;
  productStatus_in?: Maybe<String[] | String>;
  productStatus_not_in?: Maybe<String[] | String>;
  productStatus_lt?: Maybe<String>;
  productStatus_lte?: Maybe<String>;
  productStatus_gt?: Maybe<String>;
  productStatus_gte?: Maybe<String>;
  productStatus_contains?: Maybe<String>;
  productStatus_not_contains?: Maybe<String>;
  productStatus_starts_with?: Maybe<String>;
  productStatus_not_starts_with?: Maybe<String>;
  productStatus_ends_with?: Maybe<String>;
  productStatus_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrdersWhereInput[] | OrdersWhereInput>;
}

export interface CartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  orderedBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  totalPrice?: Maybe<Int>;
  totalPrice_not?: Maybe<Int>;
  totalPrice_in?: Maybe<Int[] | Int>;
  totalPrice_not_in?: Maybe<Int[] | Int>;
  totalPrice_lt?: Maybe<Int>;
  totalPrice_lte?: Maybe<Int>;
  totalPrice_gt?: Maybe<Int>;
  totalPrice_gte?: Maybe<Int>;
  AND?: Maybe<CartWhereInput[] | CartWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  liked_some?: Maybe<ItemWhereInput>;
  ordered_some?: Maybe<OrdersWhereInput>;
  cart_some?: Maybe<CartWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrdersWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CartCreateInput {
  id?: Maybe<ID_Input>;
  orderedBy: UserCreateOneWithoutCartInput;
  quantity: Int;
  totalPrice?: Maybe<Int>;
}

export interface UserCreateOneWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  address: String;
  phone: String;
  gender: String;
  password: String;
  liked?: Maybe<ItemCreateManyInput>;
  ordered?: Maybe<OrdersCreateManyInput>;
}

export interface ItemCreateManyInput {
  create?: Maybe<ItemCreateInput[] | ItemCreateInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  img: String;
  pname: String;
  pdetails: String;
  price: Int;
  pcs: Int;
  favourite: Boolean;
}

export interface OrdersCreateManyInput {
  create?: Maybe<OrdersCreateInput[] | OrdersCreateInput>;
  connect?: Maybe<OrdersWhereUniqueInput[] | OrdersWhereUniqueInput>;
}

export interface OrdersCreateInput {
  id?: Maybe<ID_Input>;
  product: CartCreateOneInput;
  paymentMethod: String;
  delvyDate: String;
  productStatus: String;
}

export interface CartCreateOneInput {
  create?: Maybe<CartCreateInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartUpdateInput {
  orderedBy?: Maybe<UserUpdateOneRequiredWithoutCartInput>;
  quantity?: Maybe<Int>;
  totalPrice?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  update?: Maybe<UserUpdateWithoutCartDataInput>;
  upsert?: Maybe<UserUpsertWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCartDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  password?: Maybe<String>;
  liked?: Maybe<ItemUpdateManyInput>;
  ordered?: Maybe<OrdersUpdateManyInput>;
}

export interface ItemUpdateManyInput {
  create?: Maybe<ItemCreateInput[] | ItemCreateInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueNestedInput[]
    | ItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueNestedInput[]
    | ItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateDataInput;
}

export interface ItemUpdateDataInput {
  img?: Maybe<String>;
  pname?: Maybe<String>;
  pdetails?: Maybe<String>;
  price?: Maybe<Int>;
  pcs?: Maybe<Int>;
  favourite?: Maybe<Boolean>;
}

export interface ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface ItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  pname?: Maybe<String>;
  pname_not?: Maybe<String>;
  pname_in?: Maybe<String[] | String>;
  pname_not_in?: Maybe<String[] | String>;
  pname_lt?: Maybe<String>;
  pname_lte?: Maybe<String>;
  pname_gt?: Maybe<String>;
  pname_gte?: Maybe<String>;
  pname_contains?: Maybe<String>;
  pname_not_contains?: Maybe<String>;
  pname_starts_with?: Maybe<String>;
  pname_not_starts_with?: Maybe<String>;
  pname_ends_with?: Maybe<String>;
  pname_not_ends_with?: Maybe<String>;
  pdetails?: Maybe<String>;
  pdetails_not?: Maybe<String>;
  pdetails_in?: Maybe<String[] | String>;
  pdetails_not_in?: Maybe<String[] | String>;
  pdetails_lt?: Maybe<String>;
  pdetails_lte?: Maybe<String>;
  pdetails_gt?: Maybe<String>;
  pdetails_gte?: Maybe<String>;
  pdetails_contains?: Maybe<String>;
  pdetails_not_contains?: Maybe<String>;
  pdetails_starts_with?: Maybe<String>;
  pdetails_not_starts_with?: Maybe<String>;
  pdetails_ends_with?: Maybe<String>;
  pdetails_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  pcs?: Maybe<Int>;
  pcs_not?: Maybe<Int>;
  pcs_in?: Maybe<Int[] | Int>;
  pcs_not_in?: Maybe<Int[] | Int>;
  pcs_lt?: Maybe<Int>;
  pcs_lte?: Maybe<Int>;
  pcs_gt?: Maybe<Int>;
  pcs_gte?: Maybe<Int>;
  favourite?: Maybe<Boolean>;
  favourite_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  OR?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  NOT?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface ItemUpdateManyDataInput {
  img?: Maybe<String>;
  pname?: Maybe<String>;
  pdetails?: Maybe<String>;
  price?: Maybe<Int>;
  pcs?: Maybe<Int>;
  favourite?: Maybe<Boolean>;
}

export interface OrdersUpdateManyInput {
  create?: Maybe<OrdersCreateInput[] | OrdersCreateInput>;
  update?: Maybe<
    | OrdersUpdateWithWhereUniqueNestedInput[]
    | OrdersUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OrdersUpsertWithWhereUniqueNestedInput[]
    | OrdersUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<OrdersWhereUniqueInput[] | OrdersWhereUniqueInput>;
  connect?: Maybe<OrdersWhereUniqueInput[] | OrdersWhereUniqueInput>;
  set?: Maybe<OrdersWhereUniqueInput[] | OrdersWhereUniqueInput>;
  disconnect?: Maybe<OrdersWhereUniqueInput[] | OrdersWhereUniqueInput>;
  deleteMany?: Maybe<OrdersScalarWhereInput[] | OrdersScalarWhereInput>;
  updateMany?: Maybe<
    | OrdersUpdateManyWithWhereNestedInput[]
    | OrdersUpdateManyWithWhereNestedInput
  >;
}

export interface OrdersUpdateWithWhereUniqueNestedInput {
  where: OrdersWhereUniqueInput;
  data: OrdersUpdateDataInput;
}

export interface OrdersUpdateDataInput {
  product?: Maybe<CartUpdateOneRequiredInput>;
  paymentMethod?: Maybe<String>;
  delvyDate?: Maybe<String>;
  productStatus?: Maybe<String>;
}

export interface CartUpdateOneRequiredInput {
  create?: Maybe<CartCreateInput>;
  update?: Maybe<CartUpdateDataInput>;
  upsert?: Maybe<CartUpsertNestedInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartUpdateDataInput {
  orderedBy?: Maybe<UserUpdateOneRequiredWithoutCartInput>;
  quantity?: Maybe<Int>;
  totalPrice?: Maybe<Int>;
}

export interface CartUpsertNestedInput {
  update: CartUpdateDataInput;
  create: CartCreateInput;
}

export interface OrdersUpsertWithWhereUniqueNestedInput {
  where: OrdersWhereUniqueInput;
  update: OrdersUpdateDataInput;
  create: OrdersCreateInput;
}

export interface OrdersScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  dateOrdered?: Maybe<DateTimeInput>;
  dateOrdered_not?: Maybe<DateTimeInput>;
  dateOrdered_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateOrdered_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateOrdered_lt?: Maybe<DateTimeInput>;
  dateOrdered_lte?: Maybe<DateTimeInput>;
  dateOrdered_gt?: Maybe<DateTimeInput>;
  dateOrdered_gte?: Maybe<DateTimeInput>;
  paymentMethod?: Maybe<String>;
  paymentMethod_not?: Maybe<String>;
  paymentMethod_in?: Maybe<String[] | String>;
  paymentMethod_not_in?: Maybe<String[] | String>;
  paymentMethod_lt?: Maybe<String>;
  paymentMethod_lte?: Maybe<String>;
  paymentMethod_gt?: Maybe<String>;
  paymentMethod_gte?: Maybe<String>;
  paymentMethod_contains?: Maybe<String>;
  paymentMethod_not_contains?: Maybe<String>;
  paymentMethod_starts_with?: Maybe<String>;
  paymentMethod_not_starts_with?: Maybe<String>;
  paymentMethod_ends_with?: Maybe<String>;
  paymentMethod_not_ends_with?: Maybe<String>;
  delvyDate?: Maybe<String>;
  delvyDate_not?: Maybe<String>;
  delvyDate_in?: Maybe<String[] | String>;
  delvyDate_not_in?: Maybe<String[] | String>;
  delvyDate_lt?: Maybe<String>;
  delvyDate_lte?: Maybe<String>;
  delvyDate_gt?: Maybe<String>;
  delvyDate_gte?: Maybe<String>;
  delvyDate_contains?: Maybe<String>;
  delvyDate_not_contains?: Maybe<String>;
  delvyDate_starts_with?: Maybe<String>;
  delvyDate_not_starts_with?: Maybe<String>;
  delvyDate_ends_with?: Maybe<String>;
  delvyDate_not_ends_with?: Maybe<String>;
  productStatus?: Maybe<String>;
  productStatus_not?: Maybe<String>;
  productStatus_in?: Maybe<String[] | String>;
  productStatus_not_in?: Maybe<String[] | String>;
  productStatus_lt?: Maybe<String>;
  productStatus_lte?: Maybe<String>;
  productStatus_gt?: Maybe<String>;
  productStatus_gte?: Maybe<String>;
  productStatus_contains?: Maybe<String>;
  productStatus_not_contains?: Maybe<String>;
  productStatus_starts_with?: Maybe<String>;
  productStatus_not_starts_with?: Maybe<String>;
  productStatus_ends_with?: Maybe<String>;
  productStatus_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrdersScalarWhereInput[] | OrdersScalarWhereInput>;
  OR?: Maybe<OrdersScalarWhereInput[] | OrdersScalarWhereInput>;
  NOT?: Maybe<OrdersScalarWhereInput[] | OrdersScalarWhereInput>;
}

export interface OrdersUpdateManyWithWhereNestedInput {
  where: OrdersScalarWhereInput;
  data: OrdersUpdateManyDataInput;
}

export interface OrdersUpdateManyDataInput {
  paymentMethod?: Maybe<String>;
  delvyDate?: Maybe<String>;
  productStatus?: Maybe<String>;
}

export interface UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput;
  create: UserCreateWithoutCartInput;
}

export interface CartUpdateManyMutationInput {
  quantity?: Maybe<Int>;
  totalPrice?: Maybe<Int>;
}

export interface ItemUpdateInput {
  img?: Maybe<String>;
  pname?: Maybe<String>;
  pdetails?: Maybe<String>;
  price?: Maybe<Int>;
  pcs?: Maybe<Int>;
  favourite?: Maybe<Boolean>;
}

export interface ItemUpdateManyMutationInput {
  img?: Maybe<String>;
  pname?: Maybe<String>;
  pdetails?: Maybe<String>;
  price?: Maybe<Int>;
  pcs?: Maybe<Int>;
  favourite?: Maybe<Boolean>;
}

export interface OrdersUpdateInput {
  product?: Maybe<CartUpdateOneRequiredInput>;
  paymentMethod?: Maybe<String>;
  delvyDate?: Maybe<String>;
  productStatus?: Maybe<String>;
}

export interface OrdersUpdateManyMutationInput {
  paymentMethod?: Maybe<String>;
  delvyDate?: Maybe<String>;
  productStatus?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  address: String;
  phone: String;
  gender: String;
  password: String;
  liked?: Maybe<ItemCreateManyInput>;
  ordered?: Maybe<OrdersCreateManyInput>;
  cart?: Maybe<CartCreateManyWithoutOrderedByInput>;
}

export interface CartCreateManyWithoutOrderedByInput {
  create?: Maybe<
    CartCreateWithoutOrderedByInput[] | CartCreateWithoutOrderedByInput
  >;
  connect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
}

export interface CartCreateWithoutOrderedByInput {
  id?: Maybe<ID_Input>;
  quantity: Int;
  totalPrice?: Maybe<Int>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  password?: Maybe<String>;
  liked?: Maybe<ItemUpdateManyInput>;
  ordered?: Maybe<OrdersUpdateManyInput>;
  cart?: Maybe<CartUpdateManyWithoutOrderedByInput>;
}

export interface CartUpdateManyWithoutOrderedByInput {
  create?: Maybe<
    CartCreateWithoutOrderedByInput[] | CartCreateWithoutOrderedByInput
  >;
  delete?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  connect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  set?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  disconnect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  update?: Maybe<
    | CartUpdateWithWhereUniqueWithoutOrderedByInput[]
    | CartUpdateWithWhereUniqueWithoutOrderedByInput
  >;
  upsert?: Maybe<
    | CartUpsertWithWhereUniqueWithoutOrderedByInput[]
    | CartUpsertWithWhereUniqueWithoutOrderedByInput
  >;
  deleteMany?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  updateMany?: Maybe<
    CartUpdateManyWithWhereNestedInput[] | CartUpdateManyWithWhereNestedInput
  >;
}

export interface CartUpdateWithWhereUniqueWithoutOrderedByInput {
  where: CartWhereUniqueInput;
  data: CartUpdateWithoutOrderedByDataInput;
}

export interface CartUpdateWithoutOrderedByDataInput {
  quantity?: Maybe<Int>;
  totalPrice?: Maybe<Int>;
}

export interface CartUpsertWithWhereUniqueWithoutOrderedByInput {
  where: CartWhereUniqueInput;
  update: CartUpdateWithoutOrderedByDataInput;
  create: CartCreateWithoutOrderedByInput;
}

export interface CartScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  totalPrice?: Maybe<Int>;
  totalPrice_not?: Maybe<Int>;
  totalPrice_in?: Maybe<Int[] | Int>;
  totalPrice_not_in?: Maybe<Int[] | Int>;
  totalPrice_lt?: Maybe<Int>;
  totalPrice_lte?: Maybe<Int>;
  totalPrice_gt?: Maybe<Int>;
  totalPrice_gte?: Maybe<Int>;
  AND?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  OR?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  NOT?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
}

export interface CartUpdateManyWithWhereNestedInput {
  where: CartScalarWhereInput;
  data: CartUpdateManyDataInput;
}

export interface CartUpdateManyDataInput {
  quantity?: Maybe<Int>;
  totalPrice?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  address?: Maybe<String>;
  phone?: Maybe<String>;
  gender?: Maybe<String>;
  password?: Maybe<String>;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartWhereInput>;
  AND?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface OrdersSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrdersWhereInput>;
  AND?: Maybe<OrdersSubscriptionWhereInput[] | OrdersSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Cart {
  id: ID_Output;
  createdAt: DateTimeOutput;
  quantity: Int;
  totalPrice?: Int;
}

export interface CartPromise extends Promise<Cart>, Fragmentable {
  id: () => Promise<ID_Output>;
  orderedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  quantity: () => Promise<Int>;
  totalPrice: () => Promise<Int>;
}

export interface CartSubscription
  extends Promise<AsyncIterator<Cart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orderedBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<Int>>;
}

export interface CartNullablePromise
  extends Promise<Cart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orderedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  quantity: () => Promise<Int>;
  totalPrice: () => Promise<Int>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  address: String;
  phone: String;
  gender: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<String>;
  gender: () => Promise<String>;
  password: () => Promise<String>;
  liked: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ordered: <T = FragmentableArray<Orders>>(args?: {
    where?: OrdersWhereInput;
    orderBy?: OrdersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = FragmentableArray<Cart>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  liked: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ordered: <T = Promise<AsyncIterator<OrdersSubscription>>>(args?: {
    where?: OrdersWhereInput;
    orderBy?: OrdersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = Promise<AsyncIterator<CartSubscription>>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<String>;
  gender: () => Promise<String>;
  password: () => Promise<String>;
  liked: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ordered: <T = FragmentableArray<Orders>>(args?: {
    where?: OrdersWhereInput;
    orderBy?: OrdersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = FragmentableArray<Cart>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Item {
  id: ID_Output;
  img: String;
  pname: String;
  pdetails: String;
  price: Int;
  pcs: Int;
  favourite: Boolean;
  createdAt: DateTimeOutput;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  pname: () => Promise<String>;
  pdetails: () => Promise<String>;
  price: () => Promise<Int>;
  pcs: () => Promise<Int>;
  favourite: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  img: () => Promise<AsyncIterator<String>>;
  pname: () => Promise<AsyncIterator<String>>;
  pdetails: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  pcs: () => Promise<AsyncIterator<Int>>;
  favourite: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  pname: () => Promise<String>;
  pdetails: () => Promise<String>;
  price: () => Promise<Int>;
  pcs: () => Promise<Int>;
  favourite: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Orders {
  id: ID_Output;
  dateOrdered?: DateTimeOutput;
  paymentMethod: String;
  delvyDate: String;
  productStatus: String;
}

export interface OrdersPromise extends Promise<Orders>, Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = CartPromise>() => T;
  dateOrdered: () => Promise<DateTimeOutput>;
  paymentMethod: () => Promise<String>;
  delvyDate: () => Promise<String>;
  productStatus: () => Promise<String>;
}

export interface OrdersSubscription
  extends Promise<AsyncIterator<Orders>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  product: <T = CartSubscription>() => T;
  dateOrdered: () => Promise<AsyncIterator<DateTimeOutput>>;
  paymentMethod: () => Promise<AsyncIterator<String>>;
  delvyDate: () => Promise<AsyncIterator<String>>;
  productStatus: () => Promise<AsyncIterator<String>>;
}

export interface OrdersNullablePromise
  extends Promise<Orders | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  product: <T = CartPromise>() => T;
  dateOrdered: () => Promise<DateTimeOutput>;
  paymentMethod: () => Promise<String>;
  delvyDate: () => Promise<String>;
  productStatus: () => Promise<String>;
}

export interface CartConnection {
  pageInfo: PageInfo;
  edges: CartEdge[];
}

export interface CartConnectionPromise
  extends Promise<CartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartEdge>>() => T;
  aggregate: <T = AggregateCartPromise>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CartEdge {
  node: Cart;
  cursor: String;
}

export interface CartEdgePromise extends Promise<CartEdge>, Fragmentable {
  node: <T = CartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdge>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCart {
  count: Int;
}

export interface AggregateCartPromise
  extends Promise<AggregateCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrdersConnection {
  pageInfo: PageInfo;
  edges: OrdersEdge[];
}

export interface OrdersConnectionPromise
  extends Promise<OrdersConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrdersEdge>>() => T;
  aggregate: <T = AggregateOrdersPromise>() => T;
}

export interface OrdersConnectionSubscription
  extends Promise<AsyncIterator<OrdersConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrdersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrdersSubscription>() => T;
}

export interface OrdersEdge {
  node: Orders;
  cursor: String;
}

export interface OrdersEdgePromise extends Promise<OrdersEdge>, Fragmentable {
  node: <T = OrdersPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrdersEdgeSubscription
  extends Promise<AsyncIterator<OrdersEdge>>,
    Fragmentable {
  node: <T = OrdersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrders {
  count: Int;
}

export interface AggregateOrdersPromise
  extends Promise<AggregateOrders>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrdersSubscription
  extends Promise<AsyncIterator<AggregateOrders>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CartSubscriptionPayload {
  mutation: MutationType;
  node: Cart;
  updatedFields: String[];
  previousValues: CartPreviousValues;
}

export interface CartSubscriptionPayloadPromise
  extends Promise<CartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValuesPromise>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface CartPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  quantity: Int;
  totalPrice?: Int;
}

export interface CartPreviousValuesPromise
  extends Promise<CartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  quantity: () => Promise<Int>;
  totalPrice: () => Promise<Int>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<Int>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  img: String;
  pname: String;
  pdetails: String;
  price: Int;
  pcs: Int;
  favourite: Boolean;
  createdAt: DateTimeOutput;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  pname: () => Promise<String>;
  pdetails: () => Promise<String>;
  price: () => Promise<Int>;
  pcs: () => Promise<Int>;
  favourite: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  img: () => Promise<AsyncIterator<String>>;
  pname: () => Promise<AsyncIterator<String>>;
  pdetails: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  pcs: () => Promise<AsyncIterator<Int>>;
  favourite: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrdersSubscriptionPayload {
  mutation: MutationType;
  node: Orders;
  updatedFields: String[];
  previousValues: OrdersPreviousValues;
}

export interface OrdersSubscriptionPayloadPromise
  extends Promise<OrdersSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrdersPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrdersPreviousValuesPromise>() => T;
}

export interface OrdersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrdersSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrdersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrdersPreviousValuesSubscription>() => T;
}

export interface OrdersPreviousValues {
  id: ID_Output;
  dateOrdered?: DateTimeOutput;
  paymentMethod: String;
  delvyDate: String;
  productStatus: String;
}

export interface OrdersPreviousValuesPromise
  extends Promise<OrdersPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateOrdered: () => Promise<DateTimeOutput>;
  paymentMethod: () => Promise<String>;
  delvyDate: () => Promise<String>;
  productStatus: () => Promise<String>;
}

export interface OrdersPreviousValuesSubscription
  extends Promise<AsyncIterator<OrdersPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateOrdered: () => Promise<AsyncIterator<DateTimeOutput>>;
  paymentMethod: () => Promise<AsyncIterator<String>>;
  delvyDate: () => Promise<AsyncIterator<String>>;
  productStatus: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  address: String;
  phone: String;
  gender: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  address: () => Promise<String>;
  phone: () => Promise<String>;
  gender: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Cart",
    embedded: false
  },
  {
    name: "Orders",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
